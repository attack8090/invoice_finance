version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: invoice-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: invoice
      MONGO_INITDB_ROOT_PASSWORD: yts1247@21BK
      MONGO_INITDB_DATABASE: invoice_financing
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - invoice-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: invoice-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - invoice-network

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: invoice-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/invoice_financing
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      ETHEREUM_RPC: http://localhost:8545
      CONTRACT_ADDRESS: "0x0000000000000000000000000000000000000000"
      AI_MODEL_ENDPOINT: http://ai-service:5000/api/ml
      PORT: 8080
      ENVIRONMENT: development
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
    networks:
      - invoice-network

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: invoice-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:8080/api/v1
      REACT_APP_WEB3_NETWORK: http://localhost:8545
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - invoice-network

  # Local Ethereum node (Hardhat)
  hardhat:
    build:
      context: ./blockchain
      dockerfile: Dockerfile
    container_name: invoice-blockchain
    restart: unless-stopped
    ports:
      - "8545:8545"
    volumes:
      - ./blockchain:/app
    networks:
      - invoice-network
    command: npx hardhat node --hostname 0.0.0.0

  # AI/ML Service (Python FastAPI)
  ai-service:
    build:
      context: ./ai-service
      dockerfile: Dockerfile
    container_name: invoice-ai-service
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/invoice_financing
    depends_on:
      - mongodb
    networks:
      - invoice-network

  # Blockchain Ledger Service (Go) - Epic 4 Compliance
  blockchain-ledger-service:
    build:
      context: ./blockchain-ledger-service
      dockerfile: Dockerfile
    container_name: invoice-blockchain-ledger
    restart: unless-stopped
    ports:
      - "8084:8084"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/blockchain_ledger
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      HYPERLEDGER_FABRIC_NETWORK: development
      EPIC_4_ENABLED: "true"
      ENVIRONMENT: development
    depends_on:
      - mongodb
      - redis
    networks:
      - invoice-network

  # Payment Service (Python FastAPI) - Epic 5 Compliance
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: invoice-payment-service
    restart: unless-stopped
    ports:
      - "8085:8085"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/payment_service
      REDIS_HOST: redis
      REDIS_PORT: 6379
      EPIC_5_ENABLED: "true"
      BANK_API_BASE_URL: http://bank-integration-service:8087
      BLOCKCHAIN_SERVICE_URL: http://blockchain-ledger-service:8084
      NOTIFICATION_SERVICE_URL: http://notification-service:8086
    depends_on:
      - mongodb
      - redis
      - bank-integration-service
      - blockchain-ledger-service
    networks:
      - invoice-network

  # Notification Service (Python FastAPI)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: invoice-notification-service
    restart: unless-stopped
    ports:
      - "8086:8086"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/notification_service
      REDIS_HOST: redis
      REDIS_PORT: 6379
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USERNAME: your-email@gmail.com
      SMTP_PASSWORD: your-app-password
      SMS_PROVIDER: twilio
      TWILIO_ACCOUNT_SID: your-twilio-sid
      TWILIO_AUTH_TOKEN: your-twilio-token
      PUSH_NOTIFICATION_KEY: your-fcm-key
    depends_on:
      - mongodb
      - redis
    networks:
      - invoice-network

  # Bank Integration Service (Go) - Epic 4 Compliance
  bank-integration-service:
    build:
      context: ./bank-integration-service
      dockerfile: Dockerfile
    container_name: invoice-bank-integration
    restart: unless-stopped
    ports:
      - "8087:8087"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/bank_integration
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      EPIC4_ENABLED: "true"
      FUNDING_MATCHING_ENABLED: "true"
      REAL_TIME_PROCESSING: "true"
      # Bank API configurations would be set via environment or secrets
      ENVIRONMENT: development
    depends_on:
      - mongodb
      - redis
    networks:
      - invoice-network

  # Integration External Data Service (Python FastAPI)
  integration-external-data-service:
    build:
      context: ./integration-external-data-service
      dockerfile: Dockerfile
    container_name: invoice-integration-data
    restart: unless-stopped
    ports:
      - "8088:8088"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/integration_external_data
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      - mongodb
      - redis
    networks:
      - invoice-network

  # Additional services from existing codebase
  user-management-service:
    build:
      context: ./user-management-service
      dockerfile: Dockerfile
    container_name: invoice-user-management
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/invoice_financing
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      - mongodb
      - redis
    networks:
      - invoice-network

  financing-workflow-service:
    build:
      context: ./financing-workflow-service
      dockerfile: Dockerfile
    container_name: invoice-financing-workflow
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/invoice_financing
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
    depends_on:
      - mongodb
      - redis
    networks:
      - invoice-network

  credit-scoring-service:
    build:
      context: ./credit-scoring-service
      dockerfile: Dockerfile
    container_name: invoice-credit-scoring
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/invoice_financing
    depends_on:
      - mongodb
    networks:
      - invoice-network

  document-management-service:
    build:
      context: ./document-management-service
      dockerfile: Dockerfile
    container_name: invoice-document-management
    restart: unless-stopped
    ports:
      - "8089:8089"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/invoice_financing
    depends_on:
      - mongodb
    networks:
      - invoice-network

  ocr-service:
    build:
      context: ./ocr-service
      dockerfile: Dockerfile
    container_name: invoice-ocr
    restart: unless-stopped
    ports:
      - "8090:8090"
    environment:
      DATABASE_URL: mongodb://invoice:yts1247@21BK@mongodb:27017/invoice_financing
    depends_on:
      - mongodb
    networks:
      - invoice-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  invoice-network:
    driver: bridge
